[{"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\index.tsx":"1","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\App.tsx":"2","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\auth\\AuthProvider.tsx":"3","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\auth\\Login.tsx":"4","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\Locations.tsx":"5","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\LocationProvider.tsx":"6","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\main\\MainPage.tsx":"7","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\Locations.styles.ts":"8","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\main\\MainPage.styles.ts":"9","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\utils\\service.ts":"10","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\utils\\utilsMethods.ts":"11","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\utils\\generalConstants.ts":"12","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\auth\\authApi.tsx":"13","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\SaveLocationModal.tsx":"14","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\EditLocationModal.tsx":"15","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\locationApi.tsx":"16","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\model\\Tip.tsx":"17","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\core\\index.tsx":"18"},{"size":417,"mtime":1639990148585,"results":"19","hashOfConfig":"20"},{"size":1197,"mtime":1652115587198,"results":"21","hashOfConfig":"20"},{"size":2648,"mtime":1654708123726,"results":"22","hashOfConfig":"20"},{"size":3605,"mtime":1652117214642,"results":"23","hashOfConfig":"20"},{"size":11596,"mtime":1652117231814,"results":"24","hashOfConfig":"20"},{"size":1782,"mtime":1647363836648,"results":"25","hashOfConfig":"20"},{"size":7505,"mtime":1654708061042,"results":"26","hashOfConfig":"20"},{"size":1806,"mtime":1642289094687,"results":"27","hashOfConfig":"20"},{"size":1835,"mtime":1646928739063,"results":"28","hashOfConfig":"20"},{"size":853,"mtime":1647447939958,"results":"29","hashOfConfig":"20"},{"size":1488,"mtime":1652117221564,"results":"30","hashOfConfig":"20"},{"size":345,"mtime":1652115451629,"results":"31","hashOfConfig":"20"},{"size":617,"mtime":1654708123711,"results":"32","hashOfConfig":"20"},{"size":5268,"mtime":1654708123695,"results":"33","hashOfConfig":"20"},{"size":6689,"mtime":1650392897027,"results":"34","hashOfConfig":"20"},{"size":805,"mtime":1647358057887,"results":"35","hashOfConfig":"20"},{"size":58,"mtime":1646930320430,"results":"36","hashOfConfig":"20"},{"size":245,"mtime":1637758104761,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"8g6c6v",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\index.tsx",[],["80","81"],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\App.tsx",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\auth\\AuthProvider.tsx",["82"],"import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { loginApi } from \"./authApi\";\r\nimport { User } from \"../model/IUser\";\r\n\r\ntype LoginFn = (email?: string, password?: string) => void;\r\n\r\nconst initialState: AuthState = {\r\n  isAuthenticated: false,\r\n  isAuthenticating: false,\r\n  authenticationError: null,\r\n  pendingAuthentication: false,\r\n};\r\n\r\nexport interface AuthState {\r\n  authenticationError: Error | null;\r\n  isAuthenticated: boolean;\r\n  isAuthenticating: boolean;\r\n  pendingAuthentication?: boolean;\r\n  email?: string;\r\n  password?: string;\r\n  user?: User;\r\n  login?: LoginFn;\r\n}\r\n\r\nexport const AuthContext = createContext(initialState);\r\n\r\ninterface AuthProviderProps {\r\n  children: PropTypes.ReactNodeLike;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [state, setState] = useState<AuthState>(initialState);\r\n  const {\r\n    isAuthenticated,\r\n    isAuthenticating,\r\n    authenticationError,\r\n    pendingAuthentication,\r\n    user,\r\n  } = state;\r\n  const login = useCallback<LoginFn>(loginCallback, [state]);\r\n  useEffect(authenticationEffect, [pendingAuthentication]);\r\n  const value = {\r\n    isAuthenticated,\r\n    isAuthenticating,\r\n    authenticationError,\r\n    user,\r\n    login,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n\r\n  function loginCallback(email?: string, password?: string): void {\r\n    setState({\r\n      ...state,\r\n      pendingAuthentication: true,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n\r\n  function authenticationEffect() {\r\n    let canceled = false;\r\n    authenticate();\r\n    return () => {\r\n      canceled = true;\r\n    };\r\n\r\n    async function authenticate() {\r\n      if (!pendingAuthentication) {\r\n        return;\r\n      }\r\n      try {\r\n        setState({\r\n          ...state,\r\n          isAuthenticating: true,\r\n        });\r\n        const { email, password } = state;\r\n        const user = await loginApi(email, password);\r\n        if (canceled) {\r\n          return;\r\n        }\r\n        setState({\r\n          ...state,\r\n          pendingAuthentication: false,\r\n          isAuthenticated: true,\r\n          isAuthenticating: false,\r\n          user,\r\n        });\r\n      } catch (error: any) {\r\n        if (canceled) {\r\n          return;\r\n        }\r\n        setState({\r\n          ...state,\r\n          authenticationError: error,\r\n          pendingAuthentication: false,\r\n          isAuthenticating: false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\auth\\Login.tsx",["83","84"],"import React, { FormEvent, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"./AuthProvider\";\r\nimport LoginFoot from \"../images/foot.svg\";\r\nimport {loggedUser} from \"../utils/utilsMethods\";\r\n\r\ninterface LoginState {\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n  const {\r\n    isAuthenticated,\r\n    isAuthenticating,\r\n    authenticationError,\r\n    login,\r\n  } = useAuth();\r\n  const [state, setState] = useState<LoginState>({});\r\n  const { email, password } = state;\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    login?.(email, password);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && loggedUser.email != \"\") {\r\n      navigate(\"/dashboard\");\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  return (\r\n    <div className=\"hero is-fullheight has-background-dark\">\r\n      <div />\r\n      <div className=\"columns has-text-centered is-centered mt-6\">\r\n        <div className=\"column is-one-third\"></div>\r\n        <div className=\"column is-one-fifth mt-6\">\r\n          <div className=\"mt-6\">\r\n            <h1 className=\"title has-text-white is-size-1 pb-5\">Log in</h1>\r\n            <h2 className=\"subtitle has-text-white is-size-5\">\r\n              Start planning your next vacation!\r\n            </h2>\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n              <div className=\"field py-2\">\r\n                <input\r\n                  type=\"email\"\r\n                  id = \"email\"\r\n                  placeholder=\"Username\"\r\n                  className=\"input has-background-info border-info has-text-white\"\r\n                  onChange={(e) =>\r\n                    setState({ ...state, email: e.currentTarget.value || \"\" })\r\n                  }\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"field py-2\">\r\n                <input\r\n                  type=\"password\"\r\n                  id = \"password\"\r\n                  placeholder=\"Password\"\r\n                  className=\"input has-background-info border-info has-text-white\"\r\n                  onChange={(e) =>\r\n                    setState({\r\n                      ...state,\r\n                      password: e.currentTarget.value || \"\",\r\n                    })\r\n                  }\r\n                  required\r\n                />\r\n              </div>\r\n              <button className=\"button is-primary is-fullwidth\" id = \"login\">Log in</button>\r\n              <div className=\"py-2\">\r\n                {authenticationError && (\r\n                  <div className=\"info has-text-white mt-2\">\r\n                    {authenticationError.message} <br />\r\n                    Please retry\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {isAuthenticating && (\r\n                <div className=\"columns is-fullwidth is-centered\">\r\n                  <div className=\"column is-one-third\" />\r\n                  <div className=\"column is-one-fifth mt-2\">\r\n                    <div className=\"control is-loading\"></div>\r\n                  </div>\r\n                  <div className=\"column is-one-third\" />\r\n                </div>\r\n              )}\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className=\"column is-one-third\"></div>\r\n      </div>\r\n      <div className=\"hero-foot\">\r\n        <figure className=\"image is-fullwidth\">\r\n          <img src={LoginFoot} alt=\"LoginFoot\" className=\"\" />\r\n        </figure>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\Locations.tsx",["85","86","87"],"import { CommandBar, DetailsList, IColumn, IContextualMenuItem, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\r\nimport { DetailsListLayoutMode, IObjectWithKey, Selection, SelectionMode } from '@fluentui/react/lib/DetailsList';\r\nimport React, {useCallback, useEffect, useState} from \"react\";\r\nimport { useNavigate} from \"react-router-dom\";\r\nimport { useAuth } from \"../auth/AuthProvider\";\r\nimport { LocationDetailsListItem } from \"../model/ILocationDetailsListItem\";\r\nimport { LocationService } from \"../utils/service\";\r\nimport {\r\n    getByRequestUrl,\r\n    getViewportAsPixels,\r\n    loggedUser,\r\n    setSelectedLocation,\r\n    selectedLocation,\r\n    setLoggedUser, getDefaultUser\r\n} from \"../utils/utilsMethods\";\r\nimport {commandBarStyles, defaultMenuItemStyle, detailsListColumnStyle, enabledMenuItemStyle, itemStyle, itemStyleForLastColumn, setGapBetweenHeaders, setGapBetweenHeadersAndDetailsList, setGapBetweenHeadersAndUserInfo, setStyleForUserName, transparentTheme} from \"./Locations.styles\";\r\nimport {ILocationProps} from \"../model/ILocationProps\";\r\nimport {Location} from \"../model/ILocation\";\r\nimport {ADD, DELETE, EDIT, VIEW_RECOMMENDATIONS, LOGOUT} from \"../utils/generalConstants\";\r\nimport SaveLocationModal from \"./locationAll/SaveLocationModal\";\r\nimport EditUserStoryModal from \"./locationAll/EditLocationModal\";\r\n\r\nconst CITY_COLUMN: string = \"City\";\r\nconst COUNTRY_COLUMN: string = \"Country\";\r\nconst TIP_COLUMN: string = \"Tip\";\r\nconst RATING_COLUMN: string = \"Rating\";\r\n\r\nconst getColumnName = (city: string, country: string, tip: string, rating: string, name: string): string => {\r\n    return name === city\r\n        ? city\r\n        : name === country\r\n            ? country\r\n            : name === tip\r\n                ? tip\r\n                : name === rating\r\n                    ? rating\r\n                    : name;\r\n};\r\n\r\nconst getFieldName = (columnName: string): string => {\r\n    return columnName === CITY_COLUMN\r\n        ? \"city\"\r\n        : columnName === COUNTRY_COLUMN\r\n            ? \"country\"\r\n            : columnName === TIP_COLUMN\r\n                ? \"tip\"\r\n                : columnName === RATING_COLUMN\r\n                    ? \"rating\"\r\n                        : \"\";\r\n};\r\n\r\nconst getColumn = (pageWidth: number, name: string): IColumn => {\r\n    return {\r\n        key: name,\r\n        name: getColumnName(CITY_COLUMN,COUNTRY_COLUMN,TIP_COLUMN,RATING_COLUMN,name),\r\n        fieldName: getFieldName(name),\r\n        minWidth: getViewportAsPixels(pageWidth, 10),\r\n        maxWidth: getViewportAsPixels(pageWidth, 20),\r\n        isResizable: true,\r\n        isMultiline: true,\r\n        styles: detailsListColumnStyle,\r\n    };\r\n};\r\n\r\nconst getColumns = (pageWidth: number, names: string[]): IColumn[] => {\r\n    return names.map((name: string) => getColumn(pageWidth, name));\r\n};\r\n\r\nexport const getListItemFromLocation = (location : Location): LocationDetailsListItem => {\r\n    return {\r\n        id: location.id,\r\n        city: location.city,\r\n        country: location.country,\r\n        tip: location.tip,\r\n        rating: location.rating,\r\n        user: `${location.user.firstName}${\" \"}${location.user.lastName}`,\r\n    };\r\n};\r\n\r\nconst renderItemColumn = (item: any, index?: number, column?: IColumn): React.ReactFragment => {\r\n    const fieldContent = item[column!.fieldName as keyof LocationDetailsListItem] as string;\r\n    \r\n    return (\r\n        <React.Fragment>\r\n      {column!.fieldName !== \"created\"\r\n        ? <span className={itemStyle}>{fieldContent}</span>\r\n        : <span className={itemStyleForLastColumn}>{fieldContent}</span>\r\n      }\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\nconst getLocationForCurrentUser = (allLocations: Location[]): LocationDetailsListItem[] => {\r\n    return allLocations.map((item) => getListItemFromLocation(item) );\r\n};\r\n\r\nconst getMenuItem = (name: string): IContextualMenuItem => {\r\n    return {\r\n        key: name,\r\n        text: name,\r\n        iconProps: { iconName: name }\r\n    }\r\n  };\r\n  \r\n  const getMenuItems = (names: string[]): IContextualMenuItem[] => {\r\n    return names.map((name: string) => getMenuItem(name));\r\n  };\r\n\r\nconst Locations = (props: ILocationProps): JSX.Element => {\r\n    const { isAuthenticated } = useAuth();\r\n    const navigate = useNavigate();\r\n    const [deleteItemId, setDeleteItemId] = useState<number>(0);\r\n    const [items, setItems] = useState<LocationDetailsListItem[]>([]);\r\n    const [selectedItems, setSelectedItems] = useState<IObjectWithKey[] | undefined>(undefined);\r\n    const [locations, setLocations] = useState<Location[]>([]);\r\n    const [selection] = useState<Selection>(() => new Selection({\r\n        onSelectionChanged: () => {\r\n            const selectedItems: IObjectWithKey[] = selection.getSelection();\r\n            const selected: LocationDetailsListItem = selectedItems[0] as LocationDetailsListItem;\r\n            setSelectedLocation(selected);\r\n            setSelectedItems(selectedItems);\r\n        }\r\n    }));\r\n    const columns: IColumn[] = getColumns(props.pageWidth, [CITY_COLUMN, COUNTRY_COLUMN, TIP_COLUMN, RATING_COLUMN]);\r\n    const menuItems: IContextualMenuItem[] = getMenuItems([ADD, EDIT, DELETE, VIEW_RECOMMENDATIONS, LOGOUT]);\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            navigate(\"/login\");\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    useEffect(() => {\r\n        getAllLocationsForCurrentUser();\r\n    }, []);\r\n\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const switchSavingMode = useCallback(\r\n        () => setIsSaving((isSaving) => !isSaving),\r\n        []\r\n    );\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const switchEditingMode = useCallback(\r\n        () => setIsEditing((isEditing) => !isEditing),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        if(deleteItemId === 0) {\r\n          return;\r\n        }\r\n    \r\n        deleteLocation();\r\n      }, [deleteItemId]);\r\n\r\n    const getAllLocationsForCurrentUser = async () => {\r\n        const allLocations: Location[] = await getByRequestUrl(`${LocationService.GET_ALL_BY_USER_ID}${loggedUser.id}`);\r\n        setItems(getLocationForCurrentUser(allLocations));\r\n        setLocations(allLocations)\r\n    };\r\n\r\n    const getSelectedLocation = (): Location => {\r\n        const index = locations.findIndex((it) => it.id === selectedLocation.id);\r\n        return locations[index];\r\n    };\r\n\r\n    const deleteLocation = async () => {\r\n        const location: LocationDetailsListItem = getSelectedItem() as LocationDetailsListItem;\r\n        const requestUrl: string = `${LocationService.DELETE_BY_ID}${location.id}`;\r\n        const message: string = await getByRequestUrl(requestUrl);\r\n    \r\n        if(message === \"Success\") {\r\n            getAllLocationsForCurrentUser();\r\n        }\r\n        else {\r\n          alert(\"An error has occurred on delete operation\");\r\n        }\r\n    };\r\n\r\n    const getSelectedItem = (): IObjectWithKey => {\r\n        return selectedItems![0];\r\n    };\r\n\r\n    const getTitle = (): string => {\r\n        return `${loggedUser.firstName}${\" \"}${loggedUser.lastName}${\"'s locations\"}`;\r\n    };\r\n\r\n    const isEditOrDeleteDisabled = (checkEdit: boolean): boolean => {\r\n        if (!selectedItems)\r\n            return true;\r\n    \r\n        if (checkEdit) {\r\n            if (selectedItems.length !== 1)\r\n                return true;\r\n        }\r\n        else\r\n            if (selectedItems.length < 1)\r\n                return true;\r\n        return false;\r\n      };\r\n\r\n    const onViewClicked = (): void => {\r\n        if (isAuthenticated) {\r\n            navigate(\"/dashboard\");\r\n        }\r\n    };\r\n\r\n    const onLogOutClicked = (): void => {\r\n        setLoggedUser(getDefaultUser());\r\n        navigate(\"/\");\r\n    };\r\n\r\n    const onAddClicked = (): void => {\r\n        switchSavingMode();\r\n    };\r\n\r\n    const onEditClicked = (): void => {\r\n        if (locations.find((us) => us.id === selectedLocation.id) !== undefined) {\r\n            switchEditingMode();\r\n        }\r\n    };\r\n\r\n    const onDeleteClicked = (): void => {\r\n        const deleteLoc: LocationDetailsListItem = getSelectedItem() as LocationDetailsListItem;\r\n        setDeleteItemId(deleteLoc.id);\r\n    };\r\n\r\n    const updateMenuItems = (): IContextualMenuItem[] => {\r\n        return menuItems.map((item: IContextualMenuItem) => {\r\n            switch (item.key) {\r\n                case ADD:\r\n                    item.onClick = () => onAddClicked();\r\n                    item.style = enabledMenuItemStyle;\r\n                    break;\r\n                case VIEW_RECOMMENDATIONS:\r\n                    item.onClick = () => onViewClicked();\r\n                    item.style = enabledMenuItemStyle\r\n                    break;\r\n                case LOGOUT:\r\n                    item.onClick = () => onLogOutClicked();\r\n                    item.style = enabledMenuItemStyle\r\n                    break;\r\n                case EDIT:\r\n                    item.disabled = isEditOrDeleteDisabled(true);\r\n                    item.onClick = () => onEditClicked();\r\n                    item.style =\r\n                        selectedItems?.length === 1\r\n                            ? enabledMenuItemStyle\r\n                            : defaultMenuItemStyle;\r\n                    break;\r\n                case DELETE:\r\n                    item.disabled = isEditOrDeleteDisabled(false);\r\n                    item.onClick = () => onDeleteClicked();\r\n                    item.style =\r\n                        selectedItems?.length === 1\r\n                            ? enabledMenuItemStyle\r\n                            : defaultMenuItemStyle;\r\n                    break;\r\n                default:\r\n                    return item;\r\n            }\r\n            return item;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {isSaving && (\r\n            <SaveLocationModal\r\n                switchMode={switchSavingMode}\r\n                items={items}\r\n                setItems={setItems}\r\n                locations = {locations}\r\n                setLocations = {setLocations}\r\n            />\r\n        )}\r\n        {isEditing && (\r\n            <EditUserStoryModal\r\n                switchMode={switchEditingMode}\r\n                location={getSelectedLocation()}\r\n                items={items}\r\n                setItems={setItems}\r\n                locations={locations}\r\n                setLocations={setLocations}\r\n            />\r\n         )}\r\n        <Stack className=\"hero is-fullheight has-background-dark\" tokens={setGapBetweenHeadersAndDetailsList}>\r\n            <Stack horizontal tokens={setGapBetweenHeadersAndUserInfo}>\r\n                <StackItem tokens={setGapBetweenHeaders}>\r\n                    <p className=\"title has-text-white is-size-3 marginFH2\"> {getTitle()} </p>\r\n                </StackItem>\r\n            </Stack>\r\n            <StackItem>\r\n                <ThemeProvider theme={transparentTheme}>\r\n                    <CommandBar items={updateMenuItems()} styles={commandBarStyles} />\r\n                    <DetailsList className=\"hero is-fullheight has-background-dark\"\r\n                        items={items}\r\n                        setKey=\"set\"\r\n                        columns={columns}\r\n                        selectionMode={SelectionMode.single}\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selection={selection}\r\n                        selectionPreservedOnEmptyClick={true}\r\n                        onRenderItemColumn={renderItemColumn}>\r\n                    </DetailsList>\r\n                </ThemeProvider>\r\n            </StackItem>\r\n        </Stack>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Locations;\r\n","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\LocationProvider.tsx",["88"],"import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LocationProps } from \"./LocationProps\";\r\nimport { createLocation, updateLocation } from \"./locationApi\";\r\n\r\ntype SaveLocationFn = (location: LocationProps) => Promise<any>;\r\n\r\nexport interface LocationState {\r\n  saving: boolean;\r\n  savingError?: Error | null;\r\n  saveLocation?: SaveLocationFn;\r\n}\r\n\r\nconst initialState: LocationState = {\r\n  saving: false,\r\n};\r\n\r\nexport const LocationContext = React.createContext<LocationState>(\r\n  initialState\r\n);\r\n\r\ninterface LocationProviderProps {\r\n  children: PropTypes.ReactNodeLike;\r\n}\r\n\r\nexport const LocationProvider: React.FC<LocationProviderProps> = ({\r\n  children,\r\n}) => {\r\n  const [state, setState] = useState<LocationState>(initialState);\r\n  const { saving, savingError } = state;\r\n  const saveLocation = useCallback<SaveLocationFn>(saveLocationCallback, []);\r\n  const value = {\r\n    saving,\r\n    savingError,\r\n    saveLocation,\r\n  };\r\n\r\n  return (\r\n    <LocationContext.Provider value={value}>\r\n      {children}\r\n    </LocationContext.Provider>\r\n  );\r\n\r\n  async function saveLocationCallback(location: LocationProps) {\r\n    try {\r\n      setState({...state, savingError: null, saving: true});\r\n      const loc = {\r\n        id: location.id!,\r\n        city: location.city!,\r\n        country: location.country!,\r\n        tip: location.tip!,\r\n        rating: location.rating!,\r\n        user: location.user!,\r\n      };\r\n      const savedLocation = await (location.id\r\n          ? updateLocation(loc)\r\n          : createLocation(loc));\r\n      setState({...state, savingError: null, saving: false});\r\n      return savedLocation;\r\n    } catch (error: any) {\r\n      setState({...state, savingError: error, saving: false});\r\n    }\r\n  }\r\n};\r\n","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\main\\MainPage.tsx",["89","90","91","92","93","94"],"import { CommandBar, DetailsList, IColumn, IContextualMenuItem, Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\r\nimport { DetailsListLayoutMode, IObjectWithKey, Selection, SelectionMode } from \"@fluentui/react/lib/DetailsList\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../auth/AuthProvider\";\r\nimport { IMainPageProps } from \"../model/IMainPageProps\";\r\nimport { LocationDetailsListItem } from \"../model/ILocationDetailsListItem\";\r\nimport {VIEW_LOCATIONS, LOGOUT} from \"../utils/generalConstants\";\r\nimport { LocationMainService } from \"../utils/service\";\r\nimport {\r\n  getViewportAsPixels,\r\n  getByRequestUrl,\r\n  loggedUser, setSelectedLocation, selectedLocation, setLoggedUser, getDefaultUser\r\n} from \"../utils/utilsMethods\";\r\nimport {\r\n  commandBarStyles,\r\n  defaultMenuItemStyle,\r\n  detailsListColumnStyle,\r\n  itemStyle,\r\n  enabledMenuItemStyle,\r\n  setGapBetweenHeaders,\r\n  setGapBetweenHeadersAndDetailsList,\r\n  transparentTheme,\r\n  itemStyleForLastColumn,\r\n  setGapBetweenHeadersAndUserInfo, setStyleForUserName\r\n} from \"./MainPage.styles\";\r\nimport {Location} from \"../model/ILocation\";\r\n\r\nconst CITY_COLUMN: string = \"City\";\r\nconst COUNTRY_COLUMN: string = \"Country\";\r\nconst TIP_COLUMN: string = \"Tip\";\r\nconst RATING_COLUMN: string = \"Rating\";\r\nconst CREATED_BY_COLUMN: string = \"User\";\r\n\r\nconst getColumnName = (city: string, country: string, tip: string, rating: string, user: string, name: string): string => {\r\n  return name === city\r\n    ? city\r\n    : name === country\r\n    ? country\r\n    : name === tip\r\n    ? tip\r\n    : name === rating\r\n    ? rating\r\n    : name === user\r\n    ? user: name;\r\n};\r\n\r\nconst getFieldName = (columnName: string): string => {\r\n  return columnName === CITY_COLUMN\r\n    ? \"city\"\r\n    : columnName === COUNTRY_COLUMN\r\n    ? \"country\"\r\n    : columnName === TIP_COLUMN\r\n    ? \"tip\"\r\n    : columnName === RATING_COLUMN\r\n    ? \"rating\"\r\n    : columnName === CREATED_BY_COLUMN\r\n    ? \"user\"\r\n    : \"\";\r\n};\r\n\r\nconst getColumn = (pageWidth: number, name: string): IColumn => {\r\n  return {\r\n    key: name,\r\n    name: getColumnName(CITY_COLUMN,COUNTRY_COLUMN,TIP_COLUMN,RATING_COLUMN,CREATED_BY_COLUMN,name),\r\n    fieldName: getFieldName(name),\r\n    minWidth: getViewportAsPixels(pageWidth, 10),\r\n    maxWidth: getViewportAsPixels(pageWidth, 20),\r\n    isResizable: true,\r\n    isMultiline: true,\r\n    styles: detailsListColumnStyle,\r\n  };\r\n};\r\n\r\nconst getColumns = (pageWidth: number, names: string[]): IColumn[] => {\r\n  return names.map((name: string) => getColumn(pageWidth, name));\r\n};\r\n\r\nexport const getListItemFromMainPage = (locationMain: Location): LocationDetailsListItem => {\r\n  return {\r\n    id: locationMain.id,\r\n    city: locationMain.city,\r\n    country: locationMain.country,\r\n    tip: locationMain.tip,\r\n    rating: locationMain.rating,\r\n    user: `${locationMain.user.firstName}${\" \"}${locationMain.user.lastName}`,\r\n  };\r\n};\r\n\r\nconst renderItemColumn = (item: any, index?: number, column?: IColumn): React.ReactFragment => {\r\n  const fieldContent = item[column!.fieldName as keyof LocationDetailsListItem] as string;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {column!.fieldName !== \"created\"\r\n        ? <span className={itemStyle}>{fieldContent}</span>\r\n        : <span className={itemStyleForLastColumn}>{fieldContent}</span>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst getLocationMain = (allLocations: Location[]): LocationDetailsListItem[] => {\r\n  return allLocations.map((item) => getListItemFromMainPage(item));\r\n};\r\n\r\nconst getMenuItem = (name: string): IContextualMenuItem => {\r\n  return {\r\n    key: name,\r\n    text: name,\r\n    iconProps: { iconName: name },\r\n  };\r\n};\r\n\r\nconst getMenuItems = (names: string[]): IContextualMenuItem[] => {\r\n  return names.map((name: string) => getMenuItem(name));\r\n};\r\n\r\nconst MainPage = (props: IMainPageProps): JSX.Element => {\r\n  const { isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [items, setItems] = useState<LocationDetailsListItem[]>([]);\r\n  const [locationMain, setLocationMain] = useState<Location[]>([]);\r\n  const [selectedItems, setSelectedItems] = useState<IObjectWithKey[] | undefined>(undefined);\r\n  const [selection] = useState<Selection>(\r\n    () =>\r\n      new Selection({\r\n        onSelectionChanged: () => {\r\n          const selectedItems: IObjectWithKey[] = selection.getSelection();\r\n          const selected: LocationDetailsListItem = selectedItems[0] as LocationDetailsListItem;\r\n          setSelectedLocation(selected);\r\n          setSelectedItems(selectedItems);\r\n        }\r\n      })\r\n  );\r\n\r\n  const columns: IColumn[] = getColumns(props.pageWidth, [CITY_COLUMN, COUNTRY_COLUMN, TIP_COLUMN, RATING_COLUMN, CREATED_BY_COLUMN]);\r\n  const menuItems: IContextualMenuItem[] = getMenuItems([VIEW_LOCATIONS, LOGOUT]);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    getAllLocationsMain();\r\n  }, []);\r\n\r\n\r\n    const getAllLocationsMain = async () => {\r\n      const allLocations: Location[] = await getByRequestUrl(`${LocationMainService.GET_TOP}${loggedUser.id}`);\r\n      setItems(getLocationMain(allLocations));\r\n      setLocationMain(allLocations);\r\n    };\r\n\r\n  const getSelectedItem = (): IObjectWithKey => {\r\n    return selectedItems![0];\r\n  };\r\n\r\n  const getTitle = (): string => {\r\n    return `${\"Welcome back, \"}${loggedUser.firstName}${ \" \"}${loggedUser.lastName}${\"!\"}`;\r\n  };\r\n\r\n\r\n  const onViewClicked = (): void => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/locations\");\r\n    }\r\n  };\r\n\r\n  const onLogOutClicked = (): void => {\r\n      setLoggedUser(getDefaultUser());\r\n      navigate(\"/\");\r\n  };\r\n\r\n\r\n  const updateMenuItems = (): IContextualMenuItem[] => {\r\n    return menuItems.map((item: IContextualMenuItem) => {\r\n      switch (item.key) {\r\n        case VIEW_LOCATIONS:\r\n          item.onClick = () => onViewClicked();\r\n          item.style = enabledMenuItemStyle\r\n          break;\r\n        case LOGOUT:\r\n          item.onClick = () => onLogOutClicked();\r\n          item.style = enabledMenuItemStyle\r\n          break;\r\n        default:\r\n          return item;\r\n      }\r\n      return item;\r\n    });\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <Stack className=\"hero is-fullheight has-background-dark\" tokens={setGapBetweenHeadersAndDetailsList}>\r\n          <Stack horizontal tokens={setGapBetweenHeadersAndUserInfo}>\r\n            <StackItem tokens={setGapBetweenHeaders}>\r\n              <p className=\"title has-text-white is-size-3 marginFH2\"> {getTitle()} </p>\r\n            </StackItem>\r\n          </Stack>\r\n          <StackItem>\r\n            <ThemeProvider theme={transparentTheme}>\r\n              <CommandBar id = \"view\" items={updateMenuItems()} styles={commandBarStyles} />\r\n              <DetailsList className=\"hero is-fullheight has-background-dark\"\r\n                           items={items}\r\n                           setKey=\"set\"\r\n                           columns={columns}\r\n                           selectionMode={SelectionMode.single}\r\n                           layoutMode={DetailsListLayoutMode.justified}\r\n                           selection={selection}\r\n                           selectionPreservedOnEmptyClick={true}\r\n                           onRenderItemColumn={renderItemColumn}>\r\n              </DetailsList>\r\n            </ThemeProvider>\r\n          </StackItem>\r\n        </Stack>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\Locations.styles.ts",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\main\\MainPage.styles.ts",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\utils\\service.ts",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\utils\\utilsMethods.ts",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\utils\\generalConstants.ts",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\auth\\authApi.tsx",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\SaveLocationModal.tsx",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\EditLocationModal.tsx",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\locationpage\\locationAll\\locationApi.tsx",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\model\\Tip.tsx",[],"D:\\Faculta\\Licenta\\Traveltech\\UI\\src\\core\\index.tsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":52,"column":35,"nodeType":"101","endLine":52,"endColumn":58,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":29,"column":45,"nodeType":"105","messageId":"106","endLine":29,"endColumn":47},{"ruleId":"99","severity":1,"message":"107","line":32,"column":6,"nodeType":"101","endLine":32,"endColumn":23,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":16,"column":221,"nodeType":"111","messageId":"112","endLine":16,"endColumn":240},{"ruleId":"99","severity":1,"message":"107","line":131,"column":8,"nodeType":"101","endLine":131,"endColumn":25,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"114","line":154,"column":10,"nodeType":"101","endLine":154,"endColumn":24,"suggestions":"115"},{"ruleId":"99","severity":1,"message":"116","line":31,"column":74,"nodeType":"101","endLine":31,"endColumn":76,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"118","line":13,"column":36,"nodeType":"111","messageId":"112","endLine":13,"endColumn":52},{"ruleId":"109","severity":1,"message":"119","line":17,"column":3,"nodeType":"111","messageId":"112","endLine":17,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":25,"column":36,"nodeType":"111","messageId":"112","endLine":25,"endColumn":55},{"ruleId":"109","severity":1,"message":"120","line":123,"column":10,"nodeType":"111","messageId":"112","endLine":123,"endColumn":22},{"ruleId":"99","severity":1,"message":"107","line":144,"column":6,"nodeType":"101","endLine":144,"endColumn":23,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"122","line":157,"column":9,"nodeType":"111","messageId":"112","endLine":157,"endColumn":24},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["125"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["126"],"@typescript-eslint/no-unused-vars","'setStyleForUserName' is defined but never used.","Identifier","unusedVar",["127"],"React Hook useEffect has a missing dependency: 'deleteLocation'. Either include it or remove the dependency array.",["128"],"React Hook useCallback has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["129"],"'selectedLocation' is defined but never used.","'defaultMenuItemStyle' is defined but never used.","'locationMain' is assigned a value but never used.",["130"],"'getSelectedItem' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"133","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"133","fix":"140"},"Update the dependencies array to be: [pendingAuthentication, state]",{"range":"141","text":"142"},"Update the dependencies array to be: [isAuthenticated, navigate]",{"range":"143","text":"144"},{"range":"145","text":"144"},"Update the dependencies array to be: [deleteItemId, deleteLocation]",{"range":"146","text":"147"},"Update the dependencies array to be: [state]",{"range":"148","text":"149"},{"range":"150","text":"144"},[1275,1298],"[pendingAuthentication, state]",[842,859],"[isAuthenticated, navigate]",[5281,5298],[5861,5875],"[deleteItemId, deleteLocation]",[906,908],"[state]",[4944,4961]]